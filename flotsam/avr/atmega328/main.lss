
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000002c6  0000035a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000202  00800100  00800100  0000035a  2**0
                  ALLOC
  3 .stab         00000954  00000000  00000000  0000035c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000b4  00000000  00000000  00000cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00000d64  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000048  00000000  00000000  00000d75  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000419  00000000  00000000  00000dbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000297  00000000  00000000  000011d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000014d  00000000  00000000  0000146d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000c8  00000000  00000000  000015bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001db  00000000  00000000  00001684  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000016d  00000000  00000000  0000185f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000018  00000000  00000000  000019cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 82 00 	jmp	0x104	; 0x104 <__vector_24>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	13 e0       	ldi	r17, 0x03	; 3
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 db 00 	call	0x1b6	; 0x1b6 <main>
  88:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <init_uart>:
// buffer used to convert integer to string
char buffer[3];

void init_uart(uint16_t baudrate){

	uint16_t UBRR_val = (F_CPU/16)/(baudrate-1);
  90:	01 97       	sbiw	r24, 0x01	; 1
  92:	9c 01       	movw	r18, r24
  94:	40 e0       	ldi	r20, 0x00	; 0
  96:	50 e0       	ldi	r21, 0x00	; 0
  98:	60 e4       	ldi	r22, 0x40	; 64
  9a:	72 e4       	ldi	r23, 0x42	; 66
  9c:	8f e0       	ldi	r24, 0x0F	; 15
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <__udivmodsi4>

	UBRR0H = UBRR_val >> 8;
  a4:	83 2f       	mov	r24, r19
  a6:	99 27       	eor	r25, r25
  a8:	80 93 c5 00 	sts	0x00C5, r24
	UBRR0L = UBRR_val;
  ac:	20 93 c4 00 	sts	0x00C4, r18

	UCSR0B |= (1<<TXEN0) | (1<<RXEN0) | (1<<RXCIE0); // UART TX (Transmit - senden) einschalten
  b0:	e1 ec       	ldi	r30, 0xC1	; 193
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	88 69       	ori	r24, 0x98	; 152
  b8:	80 83       	st	Z, r24
	UCSR0C |= (1<<USBS0) | (3<<UCSZ00); //Modus Asynchron 8N1 (8 Datenbits, No Parity, 1 Stopbit)
  ba:	e2 ec       	ldi	r30, 0xC2	; 194
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	8e 60       	ori	r24, 0x0E	; 14
  c2:	80 83       	st	Z, r24
  c4:	08 95       	ret

000000c6 <uart_putc>:
}

void uart_putc(unsigned char c){

	while(!(UCSR0A & (1<<UDRE0))); // wait until sending is possible
  c6:	90 91 c0 00 	lds	r25, 0x00C0
  ca:	95 ff       	sbrs	r25, 5
  cc:	fc cf       	rjmp	.-8      	; 0xc6 <uart_putc>
	UDR0 = c; // output character saved in c
  ce:	80 93 c6 00 	sts	0x00C6, r24
  d2:	08 95       	ret

000000d4 <uart_puts>:
}

void uart_puts(char *s){
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
  d8:	ec 01       	movw	r28, r24
	while(*s){
  da:	89 91       	ld	r24, Y+
  dc:	88 23       	and	r24, r24
  de:	19 f0       	breq	.+6      	; 0xe6 <uart_puts+0x12>
		uart_putc(*s);
  e0:	0e 94 63 00 	call	0xc6	; 0xc6 <uart_putc>
  e4:	fa cf       	rjmp	.-12     	; 0xda <uart_puts+0x6>
		s++;
	}
}
  e6:	df 91       	pop	r29
  e8:	cf 91       	pop	r28
  ea:	08 95       	ret

000000ec <I2C_init>:

#include "I2C_slave.h"

void I2C_init(uint8_t address){
	// load address into TWI address register
	TWAR = address;
  ec:	80 93 ba 00 	sts	0x00BA, r24
	// set the TWCR to enable address matching and enable TWI, clear TWINT, enable TWI interrupt
	TWCR = (1<<TWIE) | (1<<TWEA) | (1<<TWINT) | (1<<TWEN);
  f0:	85 ec       	ldi	r24, 0xC5	; 197
  f2:	80 93 bc 00 	sts	0x00BC, r24
  f6:	08 95       	ret

000000f8 <I2C_stop>:
}

void I2C_stop(void){
	// clear acknowledge and enable bits
	TWCR &= ~( (1<<TWEA) | (1<<TWEN) );
  f8:	ec eb       	ldi	r30, 0xBC	; 188
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	8b 7b       	andi	r24, 0xBB	; 187
 100:	80 83       	st	Z, r24
 102:	08 95       	ret

00000104 <__vector_24>:
}

ISR(TWI_vect){
 104:	1f 92       	push	r1
 106:	0f 92       	push	r0
 108:	0f b6       	in	r0, 0x3f	; 63
 10a:	0f 92       	push	r0
 10c:	11 24       	eor	r1, r1
 10e:	8f 93       	push	r24
 110:	9f 93       	push	r25
 112:	ef 93       	push	r30
 114:	ff 93       	push	r31
	
	// temporary stores the received data
	uint8_t data;
	
	// own address has been acknowledged
	if( (TWSR & 0xF8) == TW_SR_SLA_ACK ){  
 116:	80 91 b9 00 	lds	r24, 0x00B9
 11a:	88 7f       	andi	r24, 0xF8	; 248
 11c:	80 36       	cpi	r24, 0x60	; 96
 11e:	11 f4       	brne	.+4      	; 0x124 <__vector_24+0x20>
		buffer_address = 0xFF;
 120:	8f ef       	ldi	r24, 0xFF	; 255
 122:	0b c0       	rjmp	.+22     	; 0x13a <__vector_24+0x36>
		// clear TWI interrupt flag, prepare to receive next byte and acknowledge
		TWCR |= (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN); 
	}
	else if( (TWSR & 0xF8) == TW_SR_DATA_ACK ){ // data has been received in slave receiver mode
 124:	80 91 b9 00 	lds	r24, 0x00B9
 128:	88 7f       	andi	r24, 0xF8	; 248
 12a:	80 38       	cpi	r24, 0x80	; 128
 12c:	81 f4       	brne	.+32     	; 0x14e <__vector_24+0x4a>
		
		// save the received byte inside data 
		data = TWDR;
 12e:	80 91 bb 00 	lds	r24, 0x00BB
		
		// check wether an address has already been transmitted or not
		if(buffer_address == 0xFF){
 132:	90 91 00 01 	lds	r25, 0x0100
 136:	9f 3f       	cpi	r25, 0xFF	; 255
 138:	19 f4       	brne	.+6      	; 0x140 <__vector_24+0x3c>
			
			buffer_address = data; 
 13a:	80 93 00 01 	sts	0x0100, r24
 13e:	25 c0       	rjmp	.+74     	; 0x18a <__vector_24+0x86>
			TWCR |= (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN); 
		}
		else{ // if a databyte has already been received
			
			// store the data at the current address
			rxbuffer[buffer_address] = data;
 140:	e0 91 00 01 	lds	r30, 0x0100
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	ed 5f       	subi	r30, 0xFD	; 253
 148:	fd 4f       	sbci	r31, 0xFD	; 253
 14a:	80 83       	st	Z, r24
 14c:	15 c0       	rjmp	.+42     	; 0x178 <__vector_24+0x74>
				// clear TWI interrupt flag, prepare to receive last byte and don't acknowledge
				TWCR |= (1<<TWIE) | (1<<TWINT) | (0<<TWEA) | (1<<TWEN); 
			}
		}
	}
	else if( (TWSR & 0xF8) == TW_ST_DATA_ACK ){ // device has been addressed to be a transmitter
 14e:	80 91 b9 00 	lds	r24, 0x00B9
 152:	88 7f       	andi	r24, 0xF8	; 248
 154:	88 3b       	cpi	r24, 0xB8	; 184
 156:	09 f5       	brne	.+66     	; 0x19a <__vector_24+0x96>
		
		// copy data from TWDR to the temporary memory
		data = TWDR;
 158:	80 91 bb 00 	lds	r24, 0x00BB
		
		// if no buffer read address has been sent yet
		if( buffer_address == 0xFF ){
 15c:	90 91 00 01 	lds	r25, 0x0100
 160:	9f 3f       	cpi	r25, 0xFF	; 255
 162:	11 f4       	brne	.+4      	; 0x168 <__vector_24+0x64>
			buffer_address = data;
 164:	80 93 00 01 	sts	0x0100, r24
		}
		
		// copy the specified buffer address into the TWDR register for transmission
		TWDR = txbuffer[buffer_address];
 168:	e0 91 00 01 	lds	r30, 0x0100
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	ec 5f       	subi	r30, 0xFC	; 252
 170:	fe 4f       	sbci	r31, 0xFE	; 254
 172:	80 81       	ld	r24, Z
 174:	80 93 bb 00 	sts	0x00BB, r24
		// increment buffer read address
		buffer_address++;
 178:	80 91 00 01 	lds	r24, 0x0100
 17c:	8f 5f       	subi	r24, 0xFF	; 255
 17e:	80 93 00 01 	sts	0x0100, r24
		
		// if there is another buffer address that can be sent
		if(buffer_address < 0xFF){
 182:	80 91 00 01 	lds	r24, 0x0100
 186:	8f 3f       	cpi	r24, 0xFF	; 255
 188:	21 f0       	breq	.+8      	; 0x192 <__vector_24+0x8e>
			// clear TWI interrupt flag, prepare to send next byte and receive acknowledge
			TWCR |= (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN); 
 18a:	80 91 bc 00 	lds	r24, 0x00BC
 18e:	85 6c       	ori	r24, 0xC5	; 197
 190:	07 c0       	rjmp	.+14     	; 0x1a0 <__vector_24+0x9c>
		}
		else{
			// clear TWI interrupt flag, prepare to send last byte and receive not acknowledge
			TWCR |= (1<<TWIE) | (1<<TWINT) | (0<<TWEA) | (1<<TWEN); 
 192:	80 91 bc 00 	lds	r24, 0x00BC
 196:	85 68       	ori	r24, 0x85	; 133
 198:	03 c0       	rjmp	.+6      	; 0x1a0 <__vector_24+0x9c>
		}
		
	}
	else{
		// if none of the above apply prepare TWI to be addressed again
		TWCR |= (1<<TWIE) | (1<<TWEA) | (1<<TWEN);
 19a:	80 91 bc 00 	lds	r24, 0x00BC
 19e:	85 64       	ori	r24, 0x45	; 69
 1a0:	80 93 bc 00 	sts	0x00BC, r24
	} 
}
 1a4:	ff 91       	pop	r31
 1a6:	ef 91       	pop	r30
 1a8:	9f 91       	pop	r25
 1aa:	8f 91       	pop	r24
 1ac:	0f 90       	pop	r0
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	0f 90       	pop	r0
 1b2:	1f 90       	pop	r1
 1b4:	18 95       	reti

000001b6 <main>:

int main(void){
	
	init_uart(57600);
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	91 ee       	ldi	r25, 0xE1	; 225
 1ba:	0e 94 48 00 	call	0x90	; 0x90 <init_uart>
	I2C_init(0x32); // initalize as slave with address 0x32
 1be:	82 e3       	ldi	r24, 0x32	; 50
 1c0:	0e 94 76 00 	call	0xec	; 0xec <I2C_init>
	
	// allow interrupts
	sei();
 1c4:	78 94       	sei
	
	while(1){
		// convert receiver buffer index 0 to character array and send it via UART
		itoa(rxbuffer[0], buffer, 10);
 1c6:	80 91 03 02 	lds	r24, 0x0203
 1ca:	4a e0       	ldi	r20, 0x0A	; 10
 1cc:	50 e0       	ldi	r21, 0x00	; 0
 1ce:	61 e0       	ldi	r22, 0x01	; 1
 1d0:	71 e0       	ldi	r23, 0x01	; 1
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	0e 94 1c 01 	call	0x238	; 0x238 <itoa>
		uart_puts(buffer);
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	91 e0       	ldi	r25, 0x01	; 1
 1dc:	0e 94 6a 00 	call	0xd4	; 0xd4 <uart_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e0:	2f ef       	ldi	r18, 0xFF	; 255
 1e2:	83 ed       	ldi	r24, 0xD3	; 211
 1e4:	90 e3       	ldi	r25, 0x30	; 48
 1e6:	21 50       	subi	r18, 0x01	; 1
 1e8:	80 40       	sbci	r24, 0x00	; 0
 1ea:	90 40       	sbci	r25, 0x00	; 0
 1ec:	e1 f7       	brne	.-8      	; 0x1e6 <main+0x30>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <main+0x3a>
 1f0:	00 00       	nop
 1f2:	e9 cf       	rjmp	.-46     	; 0x1c6 <main+0x10>

000001f4 <__udivmodsi4>:
 1f4:	a1 e2       	ldi	r26, 0x21	; 33
 1f6:	1a 2e       	mov	r1, r26
 1f8:	aa 1b       	sub	r26, r26
 1fa:	bb 1b       	sub	r27, r27
 1fc:	fd 01       	movw	r30, r26
 1fe:	0d c0       	rjmp	.+26     	; 0x21a <__udivmodsi4_ep>

00000200 <__udivmodsi4_loop>:
 200:	aa 1f       	adc	r26, r26
 202:	bb 1f       	adc	r27, r27
 204:	ee 1f       	adc	r30, r30
 206:	ff 1f       	adc	r31, r31
 208:	a2 17       	cp	r26, r18
 20a:	b3 07       	cpc	r27, r19
 20c:	e4 07       	cpc	r30, r20
 20e:	f5 07       	cpc	r31, r21
 210:	20 f0       	brcs	.+8      	; 0x21a <__udivmodsi4_ep>
 212:	a2 1b       	sub	r26, r18
 214:	b3 0b       	sbc	r27, r19
 216:	e4 0b       	sbc	r30, r20
 218:	f5 0b       	sbc	r31, r21

0000021a <__udivmodsi4_ep>:
 21a:	66 1f       	adc	r22, r22
 21c:	77 1f       	adc	r23, r23
 21e:	88 1f       	adc	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	1a 94       	dec	r1
 224:	69 f7       	brne	.-38     	; 0x200 <__udivmodsi4_loop>
 226:	60 95       	com	r22
 228:	70 95       	com	r23
 22a:	80 95       	com	r24
 22c:	90 95       	com	r25
 22e:	9b 01       	movw	r18, r22
 230:	ac 01       	movw	r20, r24
 232:	bd 01       	movw	r22, r26
 234:	cf 01       	movw	r24, r30
 236:	08 95       	ret

00000238 <itoa>:
 238:	fb 01       	movw	r30, r22
 23a:	9f 01       	movw	r18, r30
 23c:	e8 94       	clt
 23e:	42 30       	cpi	r20, 0x02	; 2
 240:	c4 f0       	brlt	.+48     	; 0x272 <itoa+0x3a>
 242:	45 32       	cpi	r20, 0x25	; 37
 244:	b4 f4       	brge	.+44     	; 0x272 <itoa+0x3a>
 246:	4a 30       	cpi	r20, 0x0A	; 10
 248:	29 f4       	brne	.+10     	; 0x254 <itoa+0x1c>
 24a:	97 fb       	bst	r25, 7
 24c:	1e f4       	brtc	.+6      	; 0x254 <itoa+0x1c>
 24e:	90 95       	com	r25
 250:	81 95       	neg	r24
 252:	9f 4f       	sbci	r25, 0xFF	; 255
 254:	64 2f       	mov	r22, r20
 256:	77 27       	eor	r23, r23
 258:	0e 94 4d 01 	call	0x29a	; 0x29a <__udivmodhi4>
 25c:	80 5d       	subi	r24, 0xD0	; 208
 25e:	8a 33       	cpi	r24, 0x3A	; 58
 260:	0c f0       	brlt	.+2      	; 0x264 <itoa+0x2c>
 262:	89 5d       	subi	r24, 0xD9	; 217
 264:	81 93       	st	Z+, r24
 266:	cb 01       	movw	r24, r22
 268:	00 97       	sbiw	r24, 0x00	; 0
 26a:	a1 f7       	brne	.-24     	; 0x254 <itoa+0x1c>
 26c:	16 f4       	brtc	.+4      	; 0x272 <itoa+0x3a>
 26e:	5d e2       	ldi	r21, 0x2D	; 45
 270:	51 93       	st	Z+, r21
 272:	10 82       	st	Z, r1
 274:	c9 01       	movw	r24, r18
 276:	0c 94 3d 01 	jmp	0x27a	; 0x27a <strrev>

0000027a <strrev>:
 27a:	dc 01       	movw	r26, r24
 27c:	fc 01       	movw	r30, r24
 27e:	67 2f       	mov	r22, r23
 280:	71 91       	ld	r23, Z+
 282:	77 23       	and	r23, r23
 284:	e1 f7       	brne	.-8      	; 0x27e <strrev+0x4>
 286:	32 97       	sbiw	r30, 0x02	; 2
 288:	04 c0       	rjmp	.+8      	; 0x292 <strrev+0x18>
 28a:	7c 91       	ld	r23, X
 28c:	6d 93       	st	X+, r22
 28e:	70 83       	st	Z, r23
 290:	62 91       	ld	r22, -Z
 292:	ae 17       	cp	r26, r30
 294:	bf 07       	cpc	r27, r31
 296:	c8 f3       	brcs	.-14     	; 0x28a <strrev+0x10>
 298:	08 95       	ret

0000029a <__udivmodhi4>:
 29a:	aa 1b       	sub	r26, r26
 29c:	bb 1b       	sub	r27, r27
 29e:	51 e1       	ldi	r21, 0x11	; 17
 2a0:	07 c0       	rjmp	.+14     	; 0x2b0 <__udivmodhi4_ep>

000002a2 <__udivmodhi4_loop>:
 2a2:	aa 1f       	adc	r26, r26
 2a4:	bb 1f       	adc	r27, r27
 2a6:	a6 17       	cp	r26, r22
 2a8:	b7 07       	cpc	r27, r23
 2aa:	10 f0       	brcs	.+4      	; 0x2b0 <__udivmodhi4_ep>
 2ac:	a6 1b       	sub	r26, r22
 2ae:	b7 0b       	sbc	r27, r23

000002b0 <__udivmodhi4_ep>:
 2b0:	88 1f       	adc	r24, r24
 2b2:	99 1f       	adc	r25, r25
 2b4:	5a 95       	dec	r21
 2b6:	a9 f7       	brne	.-22     	; 0x2a2 <__udivmodhi4_loop>
 2b8:	80 95       	com	r24
 2ba:	90 95       	com	r25
 2bc:	bc 01       	movw	r22, r24
 2be:	cd 01       	movw	r24, r26
 2c0:	08 95       	ret

000002c2 <_exit>:
 2c2:	f8 94       	cli

000002c4 <__stop_program>:
 2c4:	ff cf       	rjmp	.-2      	; 0x2c4 <__stop_program>

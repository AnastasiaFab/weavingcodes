   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	init_uart
  12               	init_uart:
  13               	.LFB6:
  14               		.file 1 "main.c"
   1:main.c        **** #ifndef F_CPU
   2:main.c        **** #define F_CPU 16000000UL
   3:main.c        **** #endif
   4:main.c        **** 
   5:main.c        **** #include <avr/io.h>
   6:main.c        **** #include <util/delay.h>
   7:main.c        **** #include <stdlib.h>
   8:main.c        **** #include <avr/interrupt.h>
   9:main.c        **** 
  10:main.c        **** #include "I2C_slave.h"
  11:main.c        **** 
  12:main.c        **** // buffer used to convert integer to string
  13:main.c        **** char buffer[3];
  14:main.c        **** 
  15:main.c        **** void init_uart(uint16_t baudrate){
  15               		.loc 1 15 0
  16               		.cfi_startproc
  17               	.LVL0:
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  16:main.c        **** 
  17:main.c        **** 	uint16_t UBRR_val = (F_CPU/16)/(baudrate-1);
  22               		.loc 1 17 0
  23 0000 0197      		sbiw r24,1
  24               	.LVL1:
  25 0002 9C01      		movw r18,r24
  26 0004 40E0      		ldi r20,0
  27 0006 50E0      		ldi r21,0
  28 0008 60E4      		ldi r22,lo8(64)
  29 000a 72E4      		ldi r23,lo8(66)
  30 000c 8FE0      		ldi r24,lo8(15)
  31 000e 90E0      		ldi r25,0
  32 0010 0E94 0000 		call __udivmodsi4
  33               	.LVL2:
  18:main.c        **** 
  19:main.c        **** 	UBRR0H = UBRR_val >> 8;
  34               		.loc 1 19 0
  35 0014 832F      		mov r24,r19
  36 0016 9927      		clr r25
  37               	.LVL3:
  38 0018 8093 C500 		sts 197,r24
  20:main.c        **** 	UBRR0L = UBRR_val;
  39               		.loc 1 20 0
  40 001c 2093 C400 		sts 196,r18
  21:main.c        **** 
  22:main.c        **** 	UCSR0B |= (1<<TXEN0) | (1<<RXEN0) | (1<<RXCIE0); // UART TX (Transmit - senden) einschalten
  41               		.loc 1 22 0
  42 0020 E1EC      		ldi r30,lo8(-63)
  43 0022 F0E0      		ldi r31,0
  44 0024 8081      		ld r24,Z
  45 0026 8869      		ori r24,lo8(-104)
  46 0028 8083      		st Z,r24
  23:main.c        **** 	UCSR0C |= (1<<USBS0) | (3<<UCSZ00); //Modus Asynchron 8N1 (8 Datenbits, No Parity, 1 Stopbit)
  47               		.loc 1 23 0
  48 002a E2EC      		ldi r30,lo8(-62)
  49 002c F0E0      		ldi r31,0
  50 002e 8081      		ld r24,Z
  51 0030 8E60      		ori r24,lo8(14)
  52 0032 8083      		st Z,r24
  53 0034 0895      		ret
  54               		.cfi_endproc
  55               	.LFE6:
  57               	.global	uart_putc
  59               	uart_putc:
  60               	.LFB7:
  24:main.c        **** }
  25:main.c        **** 
  26:main.c        **** void uart_putc(unsigned char c){
  61               		.loc 1 26 0
  62               		.cfi_startproc
  63               	/* prologue: function */
  64               	/* frame size = 0 */
  65               	/* stack size = 0 */
  66               	.L__stack_usage = 0
  67               	.LVL4:
  68               	.L4:
  27:main.c        **** 
  28:main.c        **** 	while(!(UCSR0A & (1<<UDRE0))); // wait until sending is possible
  69               		.loc 1 28 0 discriminator 1
  70 0036 9091 C000 		lds r25,192
  71 003a 95FF      		sbrs r25,5
  72 003c 00C0      		rjmp .L4
  29:main.c        **** 	UDR0 = c; // output character saved in c
  73               		.loc 1 29 0
  74 003e 8093 C600 		sts 198,r24
  75 0042 0895      		ret
  76               		.cfi_endproc
  77               	.LFE7:
  79               	.global	uart_puts
  81               	uart_puts:
  82               	.LFB8:
  30:main.c        **** }
  31:main.c        **** 
  32:main.c        **** void uart_puts(char *s){
  83               		.loc 1 32 0
  84               		.cfi_startproc
  85               	.LVL5:
  86 0044 CF93      		push r28
  87               	.LCFI0:
  88               		.cfi_def_cfa_offset 3
  89               		.cfi_offset 28, -2
  90 0046 DF93      		push r29
  91               	.LCFI1:
  92               		.cfi_def_cfa_offset 4
  93               		.cfi_offset 29, -3
  94               	/* prologue: function */
  95               	/* frame size = 0 */
  96               	/* stack size = 2 */
  97               	.L__stack_usage = 2
  98 0048 EC01      		movw r28,r24
  99               	.LVL6:
 100               	.L7:
  33:main.c        **** 	while(*s){
 101               		.loc 1 33 0 discriminator 1
 102 004a 8991      		ld r24,Y+
 103               	.LVL7:
 104 004c 8823      		tst r24
 105 004e 01F0      		breq .L9
  34:main.c        **** 		uart_putc(*s);
 106               		.loc 1 34 0
 107 0050 0E94 0000 		call uart_putc
 108               	.LVL8:
 109 0054 00C0      		rjmp .L7
 110               	.LVL9:
 111               	.L9:
 112               	/* epilogue start */
  35:main.c        **** 		s++;
  36:main.c        **** 	}
  37:main.c        **** }
 113               		.loc 1 37 0
 114 0056 DF91      		pop r29
 115 0058 CF91      		pop r28
 116               	.LVL10:
 117 005a 0895      		ret
 118               		.cfi_endproc
 119               	.LFE8:
 121               		.section	.text.startup,"ax",@progbits
 122               	.global	main
 124               	main:
 125               	.LFB9:
  38:main.c        **** 
  39:main.c        **** int main(void){
 126               		.loc 1 39 0
 127               		.cfi_startproc
 128               	/* prologue: function */
 129               	/* frame size = 0 */
 130               	/* stack size = 0 */
 131               	.L__stack_usage = 0
  40:main.c        **** 	
  41:main.c        **** 	init_uart(57600);
 132               		.loc 1 41 0
 133 0000 80E0      		ldi r24,0
 134 0002 91EE      		ldi r25,lo8(-31)
 135 0004 0E94 0000 		call init_uart
 136               	.LVL11:
  42:main.c        **** 	I2C_init(0x32); // initalize as slave with address 0x32
 137               		.loc 1 42 0
 138 0008 82E3      		ldi r24,lo8(50)
 139 000a 0E94 0000 		call I2C_init
 140               	.LVL12:
  43:main.c        **** 	
  44:main.c        **** 	// allow interrupts
  45:main.c        **** 	sei();
 141               		.loc 1 45 0
 142               	/* #APP */
 143               	 ;  45 "main.c" 1
 144 000e 7894      		sei
 145               	 ;  0 "" 2
 146               	/* #NOAPP */
 147               	.L11:
  46:main.c        **** 	
  47:main.c        **** 	while(1){
  48:main.c        **** 		// convert receiver buffer index 0 to character array and send it via UART
  49:main.c        **** 		itoa(rxbuffer[0], buffer, 10);
 148               		.loc 1 49 0 discriminator 1
 149 0010 8091 0000 		lds r24,rxbuffer
 150 0014 4AE0      		ldi r20,lo8(10)
 151 0016 50E0      		ldi r21,0
 152 0018 60E0      		ldi r22,lo8(buffer)
 153 001a 70E0      		ldi r23,hi8(buffer)
 154 001c 90E0      		ldi r25,0
 155 001e 0E94 0000 		call itoa
 156               	.LVL13:
  50:main.c        **** 		uart_puts(buffer);
 157               		.loc 1 50 0 discriminator 1
 158 0022 80E0      		ldi r24,lo8(buffer)
 159 0024 90E0      		ldi r25,hi8(buffer)
 160 0026 0E94 0000 		call uart_puts
 161               	.LVL14:
 162               	.LBB4:
 163               	.LBB5:
 164               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id: delay.h.in 2251 2011-09-14 08:20:33Z joerg_wunsch $ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/avr/include/util/delay.h **** #endif
  41:/usr/lib/avr/include/util/delay.h **** 
  42:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/avr/include/util/delay.h **** 
  46:/usr/lib/avr/include/util/delay.h **** /** \file */
  47:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/avr/include/util/delay.h ****     \code
  49:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/avr/include/util/delay.h ****     \endcode
  53:/usr/lib/avr/include/util/delay.h **** 
  54:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/avr/include/util/delay.h ****     used.
  58:/usr/lib/avr/include/util/delay.h **** 
  59:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/avr/include/util/delay.h **** 
  68:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/avr/include/util/delay.h **** 
  77:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/avr/include/util/delay.h **** 
  81:/usr/lib/avr/include/util/delay.h **** */
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/avr/include/util/delay.h **** #endif
  87:/usr/lib/avr/include/util/delay.h **** 
  88:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/avr/include/util/delay.h **** #endif
  93:/usr/lib/avr/include/util/delay.h **** 
  94:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/avr/include/util/delay.h **** #endif
  97:/usr/lib/avr/include/util/delay.h **** 
  98:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/avr/include/util/delay.h **** #endif
 103:/usr/lib/avr/include/util/delay.h **** 
 104:/usr/lib/avr/include/util/delay.h **** /**
 105:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/avr/include/util/delay.h **** 
 107:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/avr/include/util/delay.h **** 
 109:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/avr/include/util/delay.h **** 
 112:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/avr/include/util/delay.h **** 
 114:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/avr/include/util/delay.h **** 
 120:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/avr/include/util/delay.h **** 
 125:/usr/lib/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/avr/include/util/delay.h **** 
 132:/usr/lib/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/avr/include/util/delay.h **** 
 140:/usr/lib/avr/include/util/delay.h ****  */
 141:/usr/lib/avr/include/util/delay.h **** void
 142:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/avr/include/util/delay.h **** {
 144:/usr/lib/avr/include/util/delay.h **** 	uint16_t __ticks;
 145:/usr/lib/avr/include/util/delay.h **** 	double __tmp ; 
 146:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 147:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 148:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 149:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 150:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 151:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 152:/usr/lib/avr/include/util/delay.h **** 
 153:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 154:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 155:/usr/lib/avr/include/util/delay.h **** 
 156:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 157:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 158:/usr/lib/avr/include/util/delay.h **** 
 159:/usr/lib/avr/include/util/delay.h **** 	#else
 160:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 161:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 162:/usr/lib/avr/include/util/delay.h **** 	#endif
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 165               		.loc 2 164 0 discriminator 1
 166 002a 2FEF      		ldi r18,lo8(3199999)
 167 002c 83ED      		ldi r24,hi8(3199999)
 168 002e 90E3      		ldi r25,hlo8(3199999)
 169 0030 2150      		1: subi r18,1
 170 0032 8040      		sbci r24,0
 171 0034 9040      		sbci r25,0
 172 0036 01F4      		brne 1b
 173 0038 00C0      		rjmp .
 174 003a 0000      		nop
 175 003c 00C0      		rjmp .L11
 176               	.LBE5:
 177               	.LBE4:
 178               		.cfi_endproc
 179               	.LFE9:
 181               		.comm	buffer,3,1
 182               		.comm	rxbuffer,255,1
 183               		.comm	txbuffer,255,1
 184               		.comm	buffer_address,1,1
 185               		.text
 186               	.Letext0:
 187               		.file 3 "/usr/lib/avr/include/stdint.h"
 188               		.file 4 "I2C_slave.h"
 189               		.file 5 "/usr/lib/avr/include/stdlib.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccKQpmMm.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccKQpmMm.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccKQpmMm.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccKQpmMm.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccKQpmMm.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccKQpmMm.s:12     .text:0000000000000000 init_uart
     /tmp/ccKQpmMm.s:59     .text:0000000000000036 uart_putc
     /tmp/ccKQpmMm.s:81     .text:0000000000000044 uart_puts
     /tmp/ccKQpmMm.s:124    .text.startup:0000000000000000 main
                            *COM*:00000000000000ff rxbuffer
                            *COM*:0000000000000003 buffer
                            *COM*:00000000000000ff txbuffer
                            *COM*:0000000000000001 buffer_address

UNDEFINED SYMBOLS
__udivmodsi4
I2C_init
itoa
__do_clear_bss
